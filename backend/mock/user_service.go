// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/commonpool/backend/pkg/keys"
	"github.com/commonpool/backend/pkg/user"
	"sync"
)

// Ensure, that UserService does implement user.Service.
// If this is not the case, regenerate this file with moq.
var _ user.Service = &UserService{}

// UserService is a mock implementation of user.Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked user.Service
//         mockedService := &UserService{
//             FindFunc: func(query user.Query) (*user.Users, error) {
// 	               panic("mock out the Find method")
//             },
//             GetByKeysFunc: func(ctx context.Context, userKeys *keys.UserKeys) (*user.Users, error) {
// 	               panic("mock out the GetByKeys method")
//             },
//             GetUserFunc: func(userKey keys.UserKey) (*user.User, error) {
// 	               panic("mock out the GetUser method")
//             },
//             GetUsernameFunc: func(userKey keys.UserKey) (string, error) {
// 	               panic("mock out the GetUsername method")
//             },
//         }
//
//         // use mockedService in code that requires user.Service
//         // and then make assertions.
//
//     }
type UserService struct {
	// FindFunc mocks the Find method.
	FindFunc func(query user.Query) (*user.Users, error)

	// GetByKeysFunc mocks the GetByKeys method.
	GetByKeysFunc func(ctx context.Context, userKeys *keys.UserKeys) (*user.Users, error)

	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(userKey keys.UserKey) (*user.User, error)

	// GetUsernameFunc mocks the GetUsername method.
	GetUsernameFunc func(userKey keys.UserKey) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Find holds details about calls to the Find method.
		Find []struct {
			// Query is the query argument value.
			Query user.Query
		}
		// GetByKeys holds details about calls to the GetByKeys method.
		GetByKeys []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserKeys is the userKeys argument value.
			UserKeys *keys.UserKeys
		}
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// UserKey is the userKey argument value.
			UserKey keys.UserKey
		}
		// GetUsername holds details about calls to the GetUsername method.
		GetUsername []struct {
			// UserKey is the userKey argument value.
			UserKey keys.UserKey
		}
	}
	lockFind        sync.RWMutex
	lockGetByKeys   sync.RWMutex
	lockGetUser     sync.RWMutex
	lockGetUsername sync.RWMutex
}

// Find calls FindFunc.
func (mock *UserService) Find(query user.Query) (*user.Users, error) {
	if mock.FindFunc == nil {
		panic("UserService.FindFunc: method is nil but Service.Find was just called")
	}
	callInfo := struct {
		Query user.Query
	}{
		Query: query,
	}
	mock.lockFind.Lock()
	mock.calls.Find = append(mock.calls.Find, callInfo)
	mock.lockFind.Unlock()
	return mock.FindFunc(query)
}

// FindCalls gets all the calls that were made to Find.
// Check the length with:
//     len(mockedService.FindCalls())
func (mock *UserService) FindCalls() []struct {
	Query user.Query
} {
	var calls []struct {
		Query user.Query
	}
	mock.lockFind.RLock()
	calls = mock.calls.Find
	mock.lockFind.RUnlock()
	return calls
}

// GetByKeys calls GetByKeysFunc.
func (mock *UserService) GetByKeys(ctx context.Context, userKeys *keys.UserKeys) (*user.Users, error) {
	if mock.GetByKeysFunc == nil {
		panic("UserService.GetByKeysFunc: method is nil but Service.GetByKeys was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		UserKeys *keys.UserKeys
	}{
		Ctx:      ctx,
		UserKeys: userKeys,
	}
	mock.lockGetByKeys.Lock()
	mock.calls.GetByKeys = append(mock.calls.GetByKeys, callInfo)
	mock.lockGetByKeys.Unlock()
	return mock.GetByKeysFunc(ctx, userKeys)
}

// GetByKeysCalls gets all the calls that were made to GetByKeys.
// Check the length with:
//     len(mockedService.GetByKeysCalls())
func (mock *UserService) GetByKeysCalls() []struct {
	Ctx      context.Context
	UserKeys *keys.UserKeys
} {
	var calls []struct {
		Ctx      context.Context
		UserKeys *keys.UserKeys
	}
	mock.lockGetByKeys.RLock()
	calls = mock.calls.GetByKeys
	mock.lockGetByKeys.RUnlock()
	return calls
}

// GetUser calls GetUserFunc.
func (mock *UserService) GetUser(userKey keys.UserKey) (*user.User, error) {
	if mock.GetUserFunc == nil {
		panic("UserService.GetUserFunc: method is nil but Service.GetUser was just called")
	}
	callInfo := struct {
		UserKey keys.UserKey
	}{
		UserKey: userKey,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(userKey)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//     len(mockedService.GetUserCalls())
func (mock *UserService) GetUserCalls() []struct {
	UserKey keys.UserKey
} {
	var calls []struct {
		UserKey keys.UserKey
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// GetUsername calls GetUsernameFunc.
func (mock *UserService) GetUsername(userKey keys.UserKey) (string, error) {
	if mock.GetUsernameFunc == nil {
		panic("UserService.GetUsernameFunc: method is nil but Service.GetUsername was just called")
	}
	callInfo := struct {
		UserKey keys.UserKey
	}{
		UserKey: userKey,
	}
	mock.lockGetUsername.Lock()
	mock.calls.GetUsername = append(mock.calls.GetUsername, callInfo)
	mock.lockGetUsername.Unlock()
	return mock.GetUsernameFunc(userKey)
}

// GetUsernameCalls gets all the calls that were made to GetUsername.
// Check the length with:
//     len(mockedService.GetUsernameCalls())
func (mock *UserService) GetUsernameCalls() []struct {
	UserKey keys.UserKey
} {
	var calls []struct {
		UserKey keys.UserKey
	}
	mock.lockGetUsername.RLock()
	calls = mock.calls.GetUsername
	mock.lockGetUsername.RUnlock()
	return calls
}
