// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/commonpool/backend/amqp"
	"sync"
)

// Ensure, that AmqpClientMock does implement amqp.AmqpClient.
// If this is not the case, regenerate this file with moq.
var _ amqp.AmqpClient = &AmqpClientMock{}

// AmqpClientMock is a mock implementation of amqp.AmqpClient.
//
//     func TestSomethingThatUsesAmqpClient(t *testing.T) {
//
//         // make and configure a mocked amqp.AmqpClient
//         mockedAmqpClient := &AmqpClientMock{
//             GetChannelFunc: func() (amqp.AmqpChannel, error) {
// 	               panic("mock out the GetChannel method")
//             },
//             ShutdownFunc: func() error {
// 	               panic("mock out the Shutdown method")
//             },
//         }
//
//         // use mockedAmqpClient in code that requires amqp.AmqpClient
//         // and then make assertions.
//
//     }
type AmqpClientMock struct {
	// GetChannelFunc mocks the GetChannel method.
	GetChannelFunc func() (amqp.AmqpChannel, error)

	// ShutdownFunc mocks the Shutdown method.
	ShutdownFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// GetChannel holds details about calls to the GetChannel method.
		GetChannel []struct {
		}
		// Shutdown holds details about calls to the Shutdown method.
		Shutdown []struct {
		}
	}
	lockGetChannel sync.RWMutex
	lockShutdown   sync.RWMutex
}

// GetChannel calls GetChannelFunc.
func (mock *AmqpClientMock) GetChannel() (amqp.AmqpChannel, error) {
	if mock.GetChannelFunc == nil {
		panic("AmqpClientMock.GetChannelFunc: method is nil but AmqpClient.GetChannel was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetChannel.Lock()
	mock.calls.GetChannel = append(mock.calls.GetChannel, callInfo)
	mock.lockGetChannel.Unlock()
	return mock.GetChannelFunc()
}

// GetChannelCalls gets all the calls that were made to GetChannel.
// Check the length with:
//     len(mockedAmqpClient.GetChannelCalls())
func (mock *AmqpClientMock) GetChannelCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetChannel.RLock()
	calls = mock.calls.GetChannel
	mock.lockGetChannel.RUnlock()
	return calls
}

// Shutdown calls ShutdownFunc.
func (mock *AmqpClientMock) Shutdown() error {
	if mock.ShutdownFunc == nil {
		panic("AmqpClientMock.ShutdownFunc: method is nil but AmqpClient.Shutdown was just called")
	}
	callInfo := struct {
	}{}
	mock.lockShutdown.Lock()
	mock.calls.Shutdown = append(mock.calls.Shutdown, callInfo)
	mock.lockShutdown.Unlock()
	return mock.ShutdownFunc()
}

// ShutdownCalls gets all the calls that were made to Shutdown.
// Check the length with:
//     len(mockedAmqpClient.ShutdownCalls())
func (mock *AmqpClientMock) ShutdownCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockShutdown.RLock()
	calls = mock.calls.Shutdown
	mock.lockShutdown.RUnlock()
	return calls
}
