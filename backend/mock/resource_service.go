// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/commonpool/backend/pkg/keys"
	"github.com/commonpool/backend/pkg/resource"
	"sync"
)

// Ensure, that ResourceService does implement resource.Service.
// If this is not the case, regenerate this file with moq.
var _ resource.Service = &ResourceService{}

// ResourceService is a mock implementation of resource.Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked resource.Service
//         mockedService := &ResourceService{
//             CreateFunc: func(ctx context.Context, query *resource.CreateResourceQuery) error {
// 	               panic("mock out the Create method")
//             },
//             GetByKeyFunc: func(ctx context.Context, query *resource.GetResourceByKeyQuery) (*resource.GetResourceByKeyResponse, error) {
// 	               panic("mock out the GetByKey method")
//             },
//             GetResourcesByKeysFunc: func(ctx context.Context, resourceKeys *keys.ResourceKeys) (*resource.Resources, error) {
// 	               panic("mock out the GetResourcesByKeys method")
//             },
//             SearchFunc: func(ctx context.Context, query *resource.SearchResourcesQuery) (*resource.SearchResourcesResponse, error) {
// 	               panic("mock out the Search method")
//             },
//             UpdateFunc: func(ctx context.Context, query *resource.UpdateResourceQuery) error {
// 	               panic("mock out the Update method")
//             },
//         }
//
//         // use mockedService in code that requires resource.Service
//         // and then make assertions.
//
//     }
type ResourceService struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, query *resource.CreateResourceQuery) error

	// GetByKeyFunc mocks the GetByKey method.
	GetByKeyFunc func(ctx context.Context, query *resource.GetResourceByKeyQuery) (*resource.GetResourceByKeyResponse, error)

	// GetResourcesByKeysFunc mocks the GetResourcesByKeys method.
	GetResourcesByKeysFunc func(ctx context.Context, resourceKeys *keys.ResourceKeys) (*resource.Resources, error)

	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, query *resource.SearchResourcesQuery) (*resource.SearchResourcesResponse, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, query *resource.UpdateResourceQuery) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query *resource.CreateResourceQuery
		}
		// GetByKey holds details about calls to the GetByKey method.
		GetByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query *resource.GetResourceByKeyQuery
		}
		// GetResourcesByKeys holds details about calls to the GetResourcesByKeys method.
		GetResourcesByKeys []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResourceKeys is the resourceKeys argument value.
			ResourceKeys *keys.ResourceKeys
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query *resource.SearchResourcesQuery
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query *resource.UpdateResourceQuery
		}
	}
	lockCreate             sync.RWMutex
	lockGetByKey           sync.RWMutex
	lockGetResourcesByKeys sync.RWMutex
	lockSearch             sync.RWMutex
	lockUpdate             sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ResourceService) Create(ctx context.Context, query *resource.CreateResourceQuery) error {
	if mock.CreateFunc == nil {
		panic("ResourceService.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query *resource.CreateResourceQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, query)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *ResourceService) CreateCalls() []struct {
	Ctx   context.Context
	Query *resource.CreateResourceQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query *resource.CreateResourceQuery
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByKey calls GetByKeyFunc.
func (mock *ResourceService) GetByKey(ctx context.Context, query *resource.GetResourceByKeyQuery) (*resource.GetResourceByKeyResponse, error) {
	if mock.GetByKeyFunc == nil {
		panic("ResourceService.GetByKeyFunc: method is nil but Service.GetByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query *resource.GetResourceByKeyQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockGetByKey.Lock()
	mock.calls.GetByKey = append(mock.calls.GetByKey, callInfo)
	mock.lockGetByKey.Unlock()
	return mock.GetByKeyFunc(ctx, query)
}

// GetByKeyCalls gets all the calls that were made to GetByKey.
// Check the length with:
//     len(mockedService.GetByKeyCalls())
func (mock *ResourceService) GetByKeyCalls() []struct {
	Ctx   context.Context
	Query *resource.GetResourceByKeyQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query *resource.GetResourceByKeyQuery
	}
	mock.lockGetByKey.RLock()
	calls = mock.calls.GetByKey
	mock.lockGetByKey.RUnlock()
	return calls
}

// GetResourcesByKeys calls GetResourcesByKeysFunc.
func (mock *ResourceService) GetResourcesByKeys(ctx context.Context, resourceKeys *keys.ResourceKeys) (*resource.Resources, error) {
	if mock.GetResourcesByKeysFunc == nil {
		panic("ResourceService.GetResourcesByKeysFunc: method is nil but Service.GetResourcesByKeys was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ResourceKeys *keys.ResourceKeys
	}{
		Ctx:          ctx,
		ResourceKeys: resourceKeys,
	}
	mock.lockGetResourcesByKeys.Lock()
	mock.calls.GetResourcesByKeys = append(mock.calls.GetResourcesByKeys, callInfo)
	mock.lockGetResourcesByKeys.Unlock()
	return mock.GetResourcesByKeysFunc(ctx, resourceKeys)
}

// GetResourcesByKeysCalls gets all the calls that were made to GetResourcesByKeys.
// Check the length with:
//     len(mockedService.GetResourcesByKeysCalls())
func (mock *ResourceService) GetResourcesByKeysCalls() []struct {
	Ctx          context.Context
	ResourceKeys *keys.ResourceKeys
} {
	var calls []struct {
		Ctx          context.Context
		ResourceKeys *keys.ResourceKeys
	}
	mock.lockGetResourcesByKeys.RLock()
	calls = mock.calls.GetResourcesByKeys
	mock.lockGetResourcesByKeys.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *ResourceService) Search(ctx context.Context, query *resource.SearchResourcesQuery) (*resource.SearchResourcesResponse, error) {
	if mock.SearchFunc == nil {
		panic("ResourceService.SearchFunc: method is nil but Service.Search was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query *resource.SearchResourcesQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	return mock.SearchFunc(ctx, query)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//     len(mockedService.SearchCalls())
func (mock *ResourceService) SearchCalls() []struct {
	Ctx   context.Context
	Query *resource.SearchResourcesQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query *resource.SearchResourcesQuery
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ResourceService) Update(ctx context.Context, query *resource.UpdateResourceQuery) error {
	if mock.UpdateFunc == nil {
		panic("ResourceService.UpdateFunc: method is nil but Service.Update was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query *resource.UpdateResourceQuery
	}{
		Ctx:   ctx,
		Query: query,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, query)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedService.UpdateCalls())
func (mock *ResourceService) UpdateCalls() []struct {
	Ctx   context.Context
	Query *resource.UpdateResourceQuery
} {
	var calls []struct {
		Ctx   context.Context
		Query *resource.UpdateResourceQuery
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
