// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/commonpool/backend/pkg/group"
	"github.com/commonpool/backend/pkg/keys"
	"sync"
)

// Ensure, that GroupStore does implement group.Store.
// If this is not the case, regenerate this file with moq.
var _ group.Store = &GroupStore{}

// GroupStore is a mock implementation of group.Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked group.Store
//         mockedStore := &GroupStore{
//             CreateGroupAndMembershipFunc: func(ctx context.Context, groupKey keys.GroupKey, createdBy keys.UserKey, name string, description string) (*group.Group, *group.Membership, error) {
// 	               panic("mock out the CreateGroupAndMembership method")
//             },
//             CreateMembershipFunc: func(ctx context.Context, membershipKey keys.MembershipKey, isMember bool, isAdmin bool, isOwner bool, isDeactivated bool, groupConfirmed bool, userConfirmed bool) (*group.Membership, error) {
// 	               panic("mock out the CreateMembership method")
//             },
//             DeleteMembershipFunc: func(ctx context.Context, membershipKey keys.MembershipKey) error {
// 	               panic("mock out the DeleteMembership method")
//             },
//             GetGroupFunc: func(ctx context.Context, groupKey keys.GroupKey) (*group.Group, error) {
// 	               panic("mock out the GetGroup method")
//             },
//             GetGroupsFunc: func(take int, skip int) (*group.Groups, int64, error) {
// 	               panic("mock out the GetGroups method")
//             },
//             GetGroupsByKeysFunc: func(ctx context.Context, groupKeys *keys.GroupKeys) (*group.Groups, error) {
// 	               panic("mock out the GetGroupsByKeys method")
//             },
//             GetMembershipFunc: func(ctx context.Context, membershipKey keys.MembershipKey) (*group.Membership, error) {
// 	               panic("mock out the GetMembership method")
//             },
//             GetMembershipsForGroupFunc: func(ctx context.Context, groupKey keys.GroupKey, membershipStatus *group.MembershipStatus) (*group.Memberships, error) {
// 	               panic("mock out the GetMembershipsForGroup method")
//             },
//             GetMembershipsForUserFunc: func(ctx context.Context, userKey keys.UserKey, membershipStatus *group.MembershipStatus) (*group.Memberships, error) {
// 	               panic("mock out the GetMembershipsForUser method")
//             },
//             MarkInvitationAsAcceptedFunc: func(ctx context.Context, membershipKey keys.MembershipKey, decisionFrom group.MembershipParty) error {
// 	               panic("mock out the MarkInvitationAsAccepted method")
//             },
//         }
//
//         // use mockedStore in code that requires group.Store
//         // and then make assertions.
//
//     }
type GroupStore struct {
	// CreateGroupAndMembershipFunc mocks the CreateGroupAndMembership method.
	CreateGroupAndMembershipFunc func(ctx context.Context, groupKey keys.GroupKey, createdBy keys.UserKey, name string, description string) (*group.Group, *group.Membership, error)

	// CreateMembershipFunc mocks the CreateMembership method.
	CreateMembershipFunc func(ctx context.Context, membershipKey keys.MembershipKey, isMember bool, isAdmin bool, isOwner bool, isDeactivated bool, groupConfirmed bool, userConfirmed bool) (*group.Membership, error)

	// DeleteMembershipFunc mocks the DeleteMembership method.
	DeleteMembershipFunc func(ctx context.Context, membershipKey keys.MembershipKey) error

	// GetGroupFunc mocks the GetGroup method.
	GetGroupFunc func(ctx context.Context, groupKey keys.GroupKey) (*group.Group, error)

	// GetGroupsFunc mocks the GetGroups method.
	GetGroupsFunc func(take int, skip int) (*group.Groups, int64, error)

	// GetGroupsByKeysFunc mocks the GetGroupsByKeys method.
	GetGroupsByKeysFunc func(ctx context.Context, groupKeys *keys.GroupKeys) (*group.Groups, error)

	// GetMembershipFunc mocks the GetMembership method.
	GetMembershipFunc func(ctx context.Context, membershipKey keys.MembershipKey) (*group.Membership, error)

	// GetMembershipsForGroupFunc mocks the GetMembershipsForGroup method.
	GetMembershipsForGroupFunc func(ctx context.Context, groupKey keys.GroupKey, membershipStatus *group.MembershipStatus) (*group.Memberships, error)

	// GetMembershipsForUserFunc mocks the GetMembershipsForUser method.
	GetMembershipsForUserFunc func(ctx context.Context, userKey keys.UserKey, membershipStatus *group.MembershipStatus) (*group.Memberships, error)

	// MarkInvitationAsAcceptedFunc mocks the MarkInvitationAsAccepted method.
	MarkInvitationAsAcceptedFunc func(ctx context.Context, membershipKey keys.MembershipKey, decisionFrom group.MembershipParty) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateGroupAndMembership holds details about calls to the CreateGroupAndMembership method.
		CreateGroupAndMembership []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupKey is the groupKey argument value.
			GroupKey keys.GroupKey
			// CreatedBy is the createdBy argument value.
			CreatedBy keys.UserKey
			// Name is the name argument value.
			Name string
			// Description is the description argument value.
			Description string
		}
		// CreateMembership holds details about calls to the CreateMembership method.
		CreateMembership []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MembershipKey is the membershipKey argument value.
			MembershipKey keys.MembershipKey
			// IsMember is the isMember argument value.
			IsMember bool
			// IsAdmin is the isAdmin argument value.
			IsAdmin bool
			// IsOwner is the isOwner argument value.
			IsOwner bool
			// IsDeactivated is the isDeactivated argument value.
			IsDeactivated bool
			// GroupConfirmed is the groupConfirmed argument value.
			GroupConfirmed bool
			// UserConfirmed is the userConfirmed argument value.
			UserConfirmed bool
		}
		// DeleteMembership holds details about calls to the DeleteMembership method.
		DeleteMembership []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MembershipKey is the membershipKey argument value.
			MembershipKey keys.MembershipKey
		}
		// GetGroup holds details about calls to the GetGroup method.
		GetGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupKey is the groupKey argument value.
			GroupKey keys.GroupKey
		}
		// GetGroups holds details about calls to the GetGroups method.
		GetGroups []struct {
			// Take is the take argument value.
			Take int
			// Skip is the skip argument value.
			Skip int
		}
		// GetGroupsByKeys holds details about calls to the GetGroupsByKeys method.
		GetGroupsByKeys []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupKeys is the groupKeys argument value.
			GroupKeys *keys.GroupKeys
		}
		// GetMembership holds details about calls to the GetMembership method.
		GetMembership []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MembershipKey is the membershipKey argument value.
			MembershipKey keys.MembershipKey
		}
		// GetMembershipsForGroup holds details about calls to the GetMembershipsForGroup method.
		GetMembershipsForGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupKey is the groupKey argument value.
			GroupKey keys.GroupKey
			// MembershipStatus is the membershipStatus argument value.
			MembershipStatus *group.MembershipStatus
		}
		// GetMembershipsForUser holds details about calls to the GetMembershipsForUser method.
		GetMembershipsForUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserKey is the userKey argument value.
			UserKey keys.UserKey
			// MembershipStatus is the membershipStatus argument value.
			MembershipStatus *group.MembershipStatus
		}
		// MarkInvitationAsAccepted holds details about calls to the MarkInvitationAsAccepted method.
		MarkInvitationAsAccepted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MembershipKey is the membershipKey argument value.
			MembershipKey keys.MembershipKey
			// DecisionFrom is the decisionFrom argument value.
			DecisionFrom group.MembershipParty
		}
	}
	lockCreateGroupAndMembership sync.RWMutex
	lockCreateMembership         sync.RWMutex
	lockDeleteMembership         sync.RWMutex
	lockGetGroup                 sync.RWMutex
	lockGetGroups                sync.RWMutex
	lockGetGroupsByKeys          sync.RWMutex
	lockGetMembership            sync.RWMutex
	lockGetMembershipsForGroup   sync.RWMutex
	lockGetMembershipsForUser    sync.RWMutex
	lockMarkInvitationAsAccepted sync.RWMutex
}

// CreateGroupAndMembership calls CreateGroupAndMembershipFunc.
func (mock *GroupStore) CreateGroupAndMembership(ctx context.Context, groupKey keys.GroupKey, createdBy keys.UserKey, name string, description string) (*group.Group, *group.Membership, error) {
	if mock.CreateGroupAndMembershipFunc == nil {
		panic("GroupStore.CreateGroupAndMembershipFunc: method is nil but Store.CreateGroupAndMembership was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		GroupKey    keys.GroupKey
		CreatedBy   keys.UserKey
		Name        string
		Description string
	}{
		Ctx:         ctx,
		GroupKey:    groupKey,
		CreatedBy:   createdBy,
		Name:        name,
		Description: description,
	}
	mock.lockCreateGroupAndMembership.Lock()
	mock.calls.CreateGroupAndMembership = append(mock.calls.CreateGroupAndMembership, callInfo)
	mock.lockCreateGroupAndMembership.Unlock()
	return mock.CreateGroupAndMembershipFunc(ctx, groupKey, createdBy, name, description)
}

// CreateGroupAndMembershipCalls gets all the calls that were made to CreateGroupAndMembership.
// Check the length with:
//     len(mockedStore.CreateGroupAndMembershipCalls())
func (mock *GroupStore) CreateGroupAndMembershipCalls() []struct {
	Ctx         context.Context
	GroupKey    keys.GroupKey
	CreatedBy   keys.UserKey
	Name        string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		GroupKey    keys.GroupKey
		CreatedBy   keys.UserKey
		Name        string
		Description string
	}
	mock.lockCreateGroupAndMembership.RLock()
	calls = mock.calls.CreateGroupAndMembership
	mock.lockCreateGroupAndMembership.RUnlock()
	return calls
}

// CreateMembership calls CreateMembershipFunc.
func (mock *GroupStore) CreateMembership(ctx context.Context, membershipKey keys.MembershipKey, isMember bool, isAdmin bool, isOwner bool, isDeactivated bool, groupConfirmed bool, userConfirmed bool) (*group.Membership, error) {
	if mock.CreateMembershipFunc == nil {
		panic("GroupStore.CreateMembershipFunc: method is nil but Store.CreateMembership was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		MembershipKey  keys.MembershipKey
		IsMember       bool
		IsAdmin        bool
		IsOwner        bool
		IsDeactivated  bool
		GroupConfirmed bool
		UserConfirmed  bool
	}{
		Ctx:            ctx,
		MembershipKey:  membershipKey,
		IsMember:       isMember,
		IsAdmin:        isAdmin,
		IsOwner:        isOwner,
		IsDeactivated:  isDeactivated,
		GroupConfirmed: groupConfirmed,
		UserConfirmed:  userConfirmed,
	}
	mock.lockCreateMembership.Lock()
	mock.calls.CreateMembership = append(mock.calls.CreateMembership, callInfo)
	mock.lockCreateMembership.Unlock()
	return mock.CreateMembershipFunc(ctx, membershipKey, isMember, isAdmin, isOwner, isDeactivated, groupConfirmed, userConfirmed)
}

// CreateMembershipCalls gets all the calls that were made to CreateMembership.
// Check the length with:
//     len(mockedStore.CreateMembershipCalls())
func (mock *GroupStore) CreateMembershipCalls() []struct {
	Ctx            context.Context
	MembershipKey  keys.MembershipKey
	IsMember       bool
	IsAdmin        bool
	IsOwner        bool
	IsDeactivated  bool
	GroupConfirmed bool
	UserConfirmed  bool
} {
	var calls []struct {
		Ctx            context.Context
		MembershipKey  keys.MembershipKey
		IsMember       bool
		IsAdmin        bool
		IsOwner        bool
		IsDeactivated  bool
		GroupConfirmed bool
		UserConfirmed  bool
	}
	mock.lockCreateMembership.RLock()
	calls = mock.calls.CreateMembership
	mock.lockCreateMembership.RUnlock()
	return calls
}

// DeleteMembership calls DeleteMembershipFunc.
func (mock *GroupStore) DeleteMembership(ctx context.Context, membershipKey keys.MembershipKey) error {
	if mock.DeleteMembershipFunc == nil {
		panic("GroupStore.DeleteMembershipFunc: method is nil but Store.DeleteMembership was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		MembershipKey keys.MembershipKey
	}{
		Ctx:           ctx,
		MembershipKey: membershipKey,
	}
	mock.lockDeleteMembership.Lock()
	mock.calls.DeleteMembership = append(mock.calls.DeleteMembership, callInfo)
	mock.lockDeleteMembership.Unlock()
	return mock.DeleteMembershipFunc(ctx, membershipKey)
}

// DeleteMembershipCalls gets all the calls that were made to DeleteMembership.
// Check the length with:
//     len(mockedStore.DeleteMembershipCalls())
func (mock *GroupStore) DeleteMembershipCalls() []struct {
	Ctx           context.Context
	MembershipKey keys.MembershipKey
} {
	var calls []struct {
		Ctx           context.Context
		MembershipKey keys.MembershipKey
	}
	mock.lockDeleteMembership.RLock()
	calls = mock.calls.DeleteMembership
	mock.lockDeleteMembership.RUnlock()
	return calls
}

// GetGroup calls GetGroupFunc.
func (mock *GroupStore) GetGroup(ctx context.Context, groupKey keys.GroupKey) (*group.Group, error) {
	if mock.GetGroupFunc == nil {
		panic("GroupStore.GetGroupFunc: method is nil but Store.GetGroup was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		GroupKey keys.GroupKey
	}{
		Ctx:      ctx,
		GroupKey: groupKey,
	}
	mock.lockGetGroup.Lock()
	mock.calls.GetGroup = append(mock.calls.GetGroup, callInfo)
	mock.lockGetGroup.Unlock()
	return mock.GetGroupFunc(ctx, groupKey)
}

// GetGroupCalls gets all the calls that were made to GetGroup.
// Check the length with:
//     len(mockedStore.GetGroupCalls())
func (mock *GroupStore) GetGroupCalls() []struct {
	Ctx      context.Context
	GroupKey keys.GroupKey
} {
	var calls []struct {
		Ctx      context.Context
		GroupKey keys.GroupKey
	}
	mock.lockGetGroup.RLock()
	calls = mock.calls.GetGroup
	mock.lockGetGroup.RUnlock()
	return calls
}

// GetGroups calls GetGroupsFunc.
func (mock *GroupStore) GetGroups(take int, skip int) (*group.Groups, int64, error) {
	if mock.GetGroupsFunc == nil {
		panic("GroupStore.GetGroupsFunc: method is nil but Store.GetGroups was just called")
	}
	callInfo := struct {
		Take int
		Skip int
	}{
		Take: take,
		Skip: skip,
	}
	mock.lockGetGroups.Lock()
	mock.calls.GetGroups = append(mock.calls.GetGroups, callInfo)
	mock.lockGetGroups.Unlock()
	return mock.GetGroupsFunc(take, skip)
}

// GetGroupsCalls gets all the calls that were made to GetGroups.
// Check the length with:
//     len(mockedStore.GetGroupsCalls())
func (mock *GroupStore) GetGroupsCalls() []struct {
	Take int
	Skip int
} {
	var calls []struct {
		Take int
		Skip int
	}
	mock.lockGetGroups.RLock()
	calls = mock.calls.GetGroups
	mock.lockGetGroups.RUnlock()
	return calls
}

// GetGroupsByKeys calls GetGroupsByKeysFunc.
func (mock *GroupStore) GetGroupsByKeys(ctx context.Context, groupKeys *keys.GroupKeys) (*group.Groups, error) {
	if mock.GetGroupsByKeysFunc == nil {
		panic("GroupStore.GetGroupsByKeysFunc: method is nil but Store.GetGroupsByKeys was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		GroupKeys *keys.GroupKeys
	}{
		Ctx:       ctx,
		GroupKeys: groupKeys,
	}
	mock.lockGetGroupsByKeys.Lock()
	mock.calls.GetGroupsByKeys = append(mock.calls.GetGroupsByKeys, callInfo)
	mock.lockGetGroupsByKeys.Unlock()
	return mock.GetGroupsByKeysFunc(ctx, groupKeys)
}

// GetGroupsByKeysCalls gets all the calls that were made to GetGroupsByKeys.
// Check the length with:
//     len(mockedStore.GetGroupsByKeysCalls())
func (mock *GroupStore) GetGroupsByKeysCalls() []struct {
	Ctx       context.Context
	GroupKeys *keys.GroupKeys
} {
	var calls []struct {
		Ctx       context.Context
		GroupKeys *keys.GroupKeys
	}
	mock.lockGetGroupsByKeys.RLock()
	calls = mock.calls.GetGroupsByKeys
	mock.lockGetGroupsByKeys.RUnlock()
	return calls
}

// GetMembership calls GetMembershipFunc.
func (mock *GroupStore) GetMembership(ctx context.Context, membershipKey keys.MembershipKey) (*group.Membership, error) {
	if mock.GetMembershipFunc == nil {
		panic("GroupStore.GetMembershipFunc: method is nil but Store.GetMembership was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		MembershipKey keys.MembershipKey
	}{
		Ctx:           ctx,
		MembershipKey: membershipKey,
	}
	mock.lockGetMembership.Lock()
	mock.calls.GetMembership = append(mock.calls.GetMembership, callInfo)
	mock.lockGetMembership.Unlock()
	return mock.GetMembershipFunc(ctx, membershipKey)
}

// GetMembershipCalls gets all the calls that were made to GetMembership.
// Check the length with:
//     len(mockedStore.GetMembershipCalls())
func (mock *GroupStore) GetMembershipCalls() []struct {
	Ctx           context.Context
	MembershipKey keys.MembershipKey
} {
	var calls []struct {
		Ctx           context.Context
		MembershipKey keys.MembershipKey
	}
	mock.lockGetMembership.RLock()
	calls = mock.calls.GetMembership
	mock.lockGetMembership.RUnlock()
	return calls
}

// GetMembershipsForGroup calls GetMembershipsForGroupFunc.
func (mock *GroupStore) GetMembershipsForGroup(ctx context.Context, groupKey keys.GroupKey, membershipStatus *group.MembershipStatus) (*group.Memberships, error) {
	if mock.GetMembershipsForGroupFunc == nil {
		panic("GroupStore.GetMembershipsForGroupFunc: method is nil but Store.GetMembershipsForGroup was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		GroupKey         keys.GroupKey
		MembershipStatus *group.MembershipStatus
	}{
		Ctx:              ctx,
		GroupKey:         groupKey,
		MembershipStatus: membershipStatus,
	}
	mock.lockGetMembershipsForGroup.Lock()
	mock.calls.GetMembershipsForGroup = append(mock.calls.GetMembershipsForGroup, callInfo)
	mock.lockGetMembershipsForGroup.Unlock()
	return mock.GetMembershipsForGroupFunc(ctx, groupKey, membershipStatus)
}

// GetMembershipsForGroupCalls gets all the calls that were made to GetMembershipsForGroup.
// Check the length with:
//     len(mockedStore.GetMembershipsForGroupCalls())
func (mock *GroupStore) GetMembershipsForGroupCalls() []struct {
	Ctx              context.Context
	GroupKey         keys.GroupKey
	MembershipStatus *group.MembershipStatus
} {
	var calls []struct {
		Ctx              context.Context
		GroupKey         keys.GroupKey
		MembershipStatus *group.MembershipStatus
	}
	mock.lockGetMembershipsForGroup.RLock()
	calls = mock.calls.GetMembershipsForGroup
	mock.lockGetMembershipsForGroup.RUnlock()
	return calls
}

// GetMembershipsForUser calls GetMembershipsForUserFunc.
func (mock *GroupStore) GetMembershipsForUser(ctx context.Context, userKey keys.UserKey, membershipStatus *group.MembershipStatus) (*group.Memberships, error) {
	if mock.GetMembershipsForUserFunc == nil {
		panic("GroupStore.GetMembershipsForUserFunc: method is nil but Store.GetMembershipsForUser was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserKey          keys.UserKey
		MembershipStatus *group.MembershipStatus
	}{
		Ctx:              ctx,
		UserKey:          userKey,
		MembershipStatus: membershipStatus,
	}
	mock.lockGetMembershipsForUser.Lock()
	mock.calls.GetMembershipsForUser = append(mock.calls.GetMembershipsForUser, callInfo)
	mock.lockGetMembershipsForUser.Unlock()
	return mock.GetMembershipsForUserFunc(ctx, userKey, membershipStatus)
}

// GetMembershipsForUserCalls gets all the calls that were made to GetMembershipsForUser.
// Check the length with:
//     len(mockedStore.GetMembershipsForUserCalls())
func (mock *GroupStore) GetMembershipsForUserCalls() []struct {
	Ctx              context.Context
	UserKey          keys.UserKey
	MembershipStatus *group.MembershipStatus
} {
	var calls []struct {
		Ctx              context.Context
		UserKey          keys.UserKey
		MembershipStatus *group.MembershipStatus
	}
	mock.lockGetMembershipsForUser.RLock()
	calls = mock.calls.GetMembershipsForUser
	mock.lockGetMembershipsForUser.RUnlock()
	return calls
}

// MarkInvitationAsAccepted calls MarkInvitationAsAcceptedFunc.
func (mock *GroupStore) MarkInvitationAsAccepted(ctx context.Context, membershipKey keys.MembershipKey, decisionFrom group.MembershipParty) error {
	if mock.MarkInvitationAsAcceptedFunc == nil {
		panic("GroupStore.MarkInvitationAsAcceptedFunc: method is nil but Store.MarkInvitationAsAccepted was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		MembershipKey keys.MembershipKey
		DecisionFrom  group.MembershipParty
	}{
		Ctx:           ctx,
		MembershipKey: membershipKey,
		DecisionFrom:  decisionFrom,
	}
	mock.lockMarkInvitationAsAccepted.Lock()
	mock.calls.MarkInvitationAsAccepted = append(mock.calls.MarkInvitationAsAccepted, callInfo)
	mock.lockMarkInvitationAsAccepted.Unlock()
	return mock.MarkInvitationAsAcceptedFunc(ctx, membershipKey, decisionFrom)
}

// MarkInvitationAsAcceptedCalls gets all the calls that were made to MarkInvitationAsAccepted.
// Check the length with:
//     len(mockedStore.MarkInvitationAsAcceptedCalls())
func (mock *GroupStore) MarkInvitationAsAcceptedCalls() []struct {
	Ctx           context.Context
	MembershipKey keys.MembershipKey
	DecisionFrom  group.MembershipParty
} {
	var calls []struct {
		Ctx           context.Context
		MembershipKey keys.MembershipKey
		DecisionFrom  group.MembershipParty
	}
	mock.lockMarkInvitationAsAccepted.RLock()
	calls = mock.calls.MarkInvitationAsAccepted
	mock.lockMarkInvitationAsAccepted.RUnlock()
	return calls
}
