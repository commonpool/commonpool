// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/commonpool/backend/pkg/keys"
	"github.com/commonpool/backend/pkg/trading"
	"sync"
)

// Ensure, that TradingStore does implement trading.Store.
// If this is not the case, regenerate this file with moq.
var _ trading.Store = &TradingStore{}

// TradingStore is a mock implementation of trading.Store.
//
//     func TestSomethingThatUsesStore(t *testing.T) {
//
//         // make and configure a mocked trading.Store
//         mockedStore := &TradingStore{
//             FindApproversForCandidateOfferFunc: func(offer *trading.Offer, offerItems *trading.OfferItems) (*keys.UserKeys, error) {
// 	               panic("mock out the FindApproversForCandidateOffer method")
//             },
//             FindApproversForOfferFunc: func(offerKey keys.OfferKey) (trading.Approvers, error) {
// 	               panic("mock out the FindApproversForOffer method")
//             },
//             FindApproversForOffersFunc: func(offerKeys *keys.OfferKeys) (*trading.OffersApprovers, error) {
// 	               panic("mock out the FindApproversForOffers method")
//             },
//             FindGivingApproversForOfferItemFunc: func(offerItemKey keys.OfferItemKey) (*keys.UserKeys, error) {
// 	               panic("mock out the FindGivingApproversForOfferItem method")
//             },
//             FindReceivingApproversForOfferItemFunc: func(offerItemKey keys.OfferItemKey) (*keys.UserKeys, error) {
// 	               panic("mock out the FindReceivingApproversForOfferItem method")
//             },
//             GetOfferFunc: func(key keys.OfferKey) (*trading.Offer, error) {
// 	               panic("mock out the GetOffer method")
//             },
//             GetOfferItemFunc: func(ctx context.Context, key keys.OfferItemKey) (trading.OfferItem, error) {
// 	               panic("mock out the GetOfferItem method")
//             },
//             GetOfferItemsForOfferFunc: func(key keys.OfferKey) (*trading.OfferItems, error) {
// 	               panic("mock out the GetOfferItemsForOffer method")
//             },
//             GetOffersForUserFunc: func(userKey keys.UserKey) (*trading.GetOffersResult, error) {
// 	               panic("mock out the GetOffersForUser method")
//             },
//             GetTradingHistoryFunc: func(ctx context.Context, ids *keys.UserKeys) ([]trading.HistoryEntry, error) {
// 	               panic("mock out the GetTradingHistory method")
//             },
//             MarkOfferItemsAsAcceptedFunc: func(ctx context.Context, approvedBy keys.UserKey, approvedByGiver *keys.OfferItemKeys, approvedByReceiver *keys.OfferItemKeys) error {
// 	               panic("mock out the MarkOfferItemsAsAccepted method")
//             },
//             SaveOfferFunc: func(offer *trading.Offer, offerItems *trading.OfferItems) error {
// 	               panic("mock out the SaveOffer method")
//             },
//             UpdateOfferItemFunc: func(ctx context.Context, offerItem trading.OfferItem) error {
// 	               panic("mock out the UpdateOfferItem method")
//             },
//             UpdateOfferStatusFunc: func(key keys.OfferKey, offer trading.OfferStatus) error {
// 	               panic("mock out the UpdateOfferStatus method")
//             },
//         }
//
//         // use mockedStore in code that requires trading.Store
//         // and then make assertions.
//
//     }
type TradingStore struct {
	// FindApproversForCandidateOfferFunc mocks the FindApproversForCandidateOffer method.
	FindApproversForCandidateOfferFunc func(offer *trading.Offer, offerItems *trading.OfferItems) (*keys.UserKeys, error)

	// FindApproversForOfferFunc mocks the FindApproversForOffer method.
	FindApproversForOfferFunc func(offerKey keys.OfferKey) (trading.Approvers, error)

	// FindApproversForOffersFunc mocks the FindApproversForOffers method.
	FindApproversForOffersFunc func(offerKeys *keys.OfferKeys) (*trading.OffersApprovers, error)

	// FindGivingApproversForOfferItemFunc mocks the FindGivingApproversForOfferItem method.
	FindGivingApproversForOfferItemFunc func(offerItemKey keys.OfferItemKey) (*keys.UserKeys, error)

	// FindReceivingApproversForOfferItemFunc mocks the FindReceivingApproversForOfferItem method.
	FindReceivingApproversForOfferItemFunc func(offerItemKey keys.OfferItemKey) (*keys.UserKeys, error)

	// GetOfferFunc mocks the GetOffer method.
	GetOfferFunc func(key keys.OfferKey) (*trading.Offer, error)

	// GetOfferItemFunc mocks the GetOfferItem method.
	GetOfferItemFunc func(ctx context.Context, key keys.OfferItemKey) (trading.OfferItem, error)

	// GetOfferItemsForOfferFunc mocks the GetOfferItemsForOffer method.
	GetOfferItemsForOfferFunc func(key keys.OfferKey) (*trading.OfferItems, error)

	// GetOffersForUserFunc mocks the GetOffersForUser method.
	GetOffersForUserFunc func(userKey keys.UserKey) (*trading.GetOffersResult, error)

	// GetTradingHistoryFunc mocks the GetTradingHistory method.
	GetTradingHistoryFunc func(ctx context.Context, ids *keys.UserKeys) ([]trading.HistoryEntry, error)

	// MarkOfferItemsAsAcceptedFunc mocks the MarkOfferItemsAsAccepted method.
	MarkOfferItemsAsAcceptedFunc func(ctx context.Context, approvedBy keys.UserKey, approvedByGiver *keys.OfferItemKeys, approvedByReceiver *keys.OfferItemKeys) error

	// SaveOfferFunc mocks the SaveOffer method.
	SaveOfferFunc func(offer *trading.Offer, offerItems *trading.OfferItems) error

	// UpdateOfferItemFunc mocks the UpdateOfferItem method.
	UpdateOfferItemFunc func(ctx context.Context, offerItem trading.OfferItem) error

	// UpdateOfferStatusFunc mocks the UpdateOfferStatus method.
	UpdateOfferStatusFunc func(key keys.OfferKey, offer trading.OfferStatus) error

	// calls tracks calls to the methods.
	calls struct {
		// FindApproversForCandidateOffer holds details about calls to the FindApproversForCandidateOffer method.
		FindApproversForCandidateOffer []struct {
			// Offer is the offer argument value.
			Offer *trading.Offer
			// OfferItems is the offerItems argument value.
			OfferItems *trading.OfferItems
		}
		// FindApproversForOffer holds details about calls to the FindApproversForOffer method.
		FindApproversForOffer []struct {
			// OfferKey is the offerKey argument value.
			OfferKey keys.OfferKey
		}
		// FindApproversForOffers holds details about calls to the FindApproversForOffers method.
		FindApproversForOffers []struct {
			// OfferKeys is the offerKeys argument value.
			OfferKeys *keys.OfferKeys
		}
		// FindGivingApproversForOfferItem holds details about calls to the FindGivingApproversForOfferItem method.
		FindGivingApproversForOfferItem []struct {
			// OfferItemKey is the offerItemKey argument value.
			OfferItemKey keys.OfferItemKey
		}
		// FindReceivingApproversForOfferItem holds details about calls to the FindReceivingApproversForOfferItem method.
		FindReceivingApproversForOfferItem []struct {
			// OfferItemKey is the offerItemKey argument value.
			OfferItemKey keys.OfferItemKey
		}
		// GetOffer holds details about calls to the GetOffer method.
		GetOffer []struct {
			// Key is the key argument value.
			Key keys.OfferKey
		}
		// GetOfferItem holds details about calls to the GetOfferItem method.
		GetOfferItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key keys.OfferItemKey
		}
		// GetOfferItemsForOffer holds details about calls to the GetOfferItemsForOffer method.
		GetOfferItemsForOffer []struct {
			// Key is the key argument value.
			Key keys.OfferKey
		}
		// GetOffersForUser holds details about calls to the GetOffersForUser method.
		GetOffersForUser []struct {
			// UserKey is the userKey argument value.
			UserKey keys.UserKey
		}
		// GetTradingHistory holds details about calls to the GetTradingHistory method.
		GetTradingHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids *keys.UserKeys
		}
		// MarkOfferItemsAsAccepted holds details about calls to the MarkOfferItemsAsAccepted method.
		MarkOfferItemsAsAccepted []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ApprovedBy is the approvedBy argument value.
			ApprovedBy keys.UserKey
			// ApprovedByGiver is the approvedByGiver argument value.
			ApprovedByGiver *keys.OfferItemKeys
			// ApprovedByReceiver is the approvedByReceiver argument value.
			ApprovedByReceiver *keys.OfferItemKeys
		}
		// SaveOffer holds details about calls to the SaveOffer method.
		SaveOffer []struct {
			// Offer is the offer argument value.
			Offer *trading.Offer
			// OfferItems is the offerItems argument value.
			OfferItems *trading.OfferItems
		}
		// UpdateOfferItem holds details about calls to the UpdateOfferItem method.
		UpdateOfferItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OfferItem is the offerItem argument value.
			OfferItem trading.OfferItem
		}
		// UpdateOfferStatus holds details about calls to the UpdateOfferStatus method.
		UpdateOfferStatus []struct {
			// Key is the key argument value.
			Key keys.OfferKey
			// Offer is the offer argument value.
			Offer trading.OfferStatus
		}
	}
	lockFindApproversForCandidateOffer     sync.RWMutex
	lockFindApproversForOffer              sync.RWMutex
	lockFindApproversForOffers             sync.RWMutex
	lockFindGivingApproversForOfferItem    sync.RWMutex
	lockFindReceivingApproversForOfferItem sync.RWMutex
	lockGetOffer                           sync.RWMutex
	lockGetOfferItem                       sync.RWMutex
	lockGetOfferItemsForOffer              sync.RWMutex
	lockGetOffersForUser                   sync.RWMutex
	lockGetTradingHistory                  sync.RWMutex
	lockMarkOfferItemsAsAccepted           sync.RWMutex
	lockSaveOffer                          sync.RWMutex
	lockUpdateOfferItem                    sync.RWMutex
	lockUpdateOfferStatus                  sync.RWMutex
}

// FindApproversForCandidateOffer calls FindApproversForCandidateOfferFunc.
func (mock *TradingStore) FindApproversForCandidateOffer(offer *trading.Offer, offerItems *trading.OfferItems) (*keys.UserKeys, error) {
	if mock.FindApproversForCandidateOfferFunc == nil {
		panic("TradingStore.FindApproversForCandidateOfferFunc: method is nil but Store.FindApproversForCandidateOffer was just called")
	}
	callInfo := struct {
		Offer      *trading.Offer
		OfferItems *trading.OfferItems
	}{
		Offer:      offer,
		OfferItems: offerItems,
	}
	mock.lockFindApproversForCandidateOffer.Lock()
	mock.calls.FindApproversForCandidateOffer = append(mock.calls.FindApproversForCandidateOffer, callInfo)
	mock.lockFindApproversForCandidateOffer.Unlock()
	return mock.FindApproversForCandidateOfferFunc(offer, offerItems)
}

// FindApproversForCandidateOfferCalls gets all the calls that were made to FindApproversForCandidateOffer.
// Check the length with:
//     len(mockedStore.FindApproversForCandidateOfferCalls())
func (mock *TradingStore) FindApproversForCandidateOfferCalls() []struct {
	Offer      *trading.Offer
	OfferItems *trading.OfferItems
} {
	var calls []struct {
		Offer      *trading.Offer
		OfferItems *trading.OfferItems
	}
	mock.lockFindApproversForCandidateOffer.RLock()
	calls = mock.calls.FindApproversForCandidateOffer
	mock.lockFindApproversForCandidateOffer.RUnlock()
	return calls
}

// FindApproversForOffer calls FindApproversForOfferFunc.
func (mock *TradingStore) FindApproversForOffer(offerKey keys.OfferKey) (trading.Approvers, error) {
	if mock.FindApproversForOfferFunc == nil {
		panic("TradingStore.FindApproversForOfferFunc: method is nil but Store.FindApproversForOffer was just called")
	}
	callInfo := struct {
		OfferKey keys.OfferKey
	}{
		OfferKey: offerKey,
	}
	mock.lockFindApproversForOffer.Lock()
	mock.calls.FindApproversForOffer = append(mock.calls.FindApproversForOffer, callInfo)
	mock.lockFindApproversForOffer.Unlock()
	return mock.FindApproversForOfferFunc(offerKey)
}

// FindApproversForOfferCalls gets all the calls that were made to FindApproversForOffer.
// Check the length with:
//     len(mockedStore.FindApproversForOfferCalls())
func (mock *TradingStore) FindApproversForOfferCalls() []struct {
	OfferKey keys.OfferKey
} {
	var calls []struct {
		OfferKey keys.OfferKey
	}
	mock.lockFindApproversForOffer.RLock()
	calls = mock.calls.FindApproversForOffer
	mock.lockFindApproversForOffer.RUnlock()
	return calls
}

// FindApproversForOffers calls FindApproversForOffersFunc.
func (mock *TradingStore) FindApproversForOffers(offerKeys *keys.OfferKeys) (*trading.OffersApprovers, error) {
	if mock.FindApproversForOffersFunc == nil {
		panic("TradingStore.FindApproversForOffersFunc: method is nil but Store.FindApproversForOffers was just called")
	}
	callInfo := struct {
		OfferKeys *keys.OfferKeys
	}{
		OfferKeys: offerKeys,
	}
	mock.lockFindApproversForOffers.Lock()
	mock.calls.FindApproversForOffers = append(mock.calls.FindApproversForOffers, callInfo)
	mock.lockFindApproversForOffers.Unlock()
	return mock.FindApproversForOffersFunc(offerKeys)
}

// FindApproversForOffersCalls gets all the calls that were made to FindApproversForOffers.
// Check the length with:
//     len(mockedStore.FindApproversForOffersCalls())
func (mock *TradingStore) FindApproversForOffersCalls() []struct {
	OfferKeys *keys.OfferKeys
} {
	var calls []struct {
		OfferKeys *keys.OfferKeys
	}
	mock.lockFindApproversForOffers.RLock()
	calls = mock.calls.FindApproversForOffers
	mock.lockFindApproversForOffers.RUnlock()
	return calls
}

// FindGivingApproversForOfferItem calls FindGivingApproversForOfferItemFunc.
func (mock *TradingStore) FindGivingApproversForOfferItem(offerItemKey keys.OfferItemKey) (*keys.UserKeys, error) {
	if mock.FindGivingApproversForOfferItemFunc == nil {
		panic("TradingStore.FindGivingApproversForOfferItemFunc: method is nil but Store.FindGivingApproversForOfferItem was just called")
	}
	callInfo := struct {
		OfferItemKey keys.OfferItemKey
	}{
		OfferItemKey: offerItemKey,
	}
	mock.lockFindGivingApproversForOfferItem.Lock()
	mock.calls.FindGivingApproversForOfferItem = append(mock.calls.FindGivingApproversForOfferItem, callInfo)
	mock.lockFindGivingApproversForOfferItem.Unlock()
	return mock.FindGivingApproversForOfferItemFunc(offerItemKey)
}

// FindGivingApproversForOfferItemCalls gets all the calls that were made to FindGivingApproversForOfferItem.
// Check the length with:
//     len(mockedStore.FindGivingApproversForOfferItemCalls())
func (mock *TradingStore) FindGivingApproversForOfferItemCalls() []struct {
	OfferItemKey keys.OfferItemKey
} {
	var calls []struct {
		OfferItemKey keys.OfferItemKey
	}
	mock.lockFindGivingApproversForOfferItem.RLock()
	calls = mock.calls.FindGivingApproversForOfferItem
	mock.lockFindGivingApproversForOfferItem.RUnlock()
	return calls
}

// FindReceivingApproversForOfferItem calls FindReceivingApproversForOfferItemFunc.
func (mock *TradingStore) FindReceivingApproversForOfferItem(offerItemKey keys.OfferItemKey) (*keys.UserKeys, error) {
	if mock.FindReceivingApproversForOfferItemFunc == nil {
		panic("TradingStore.FindReceivingApproversForOfferItemFunc: method is nil but Store.FindReceivingApproversForOfferItem was just called")
	}
	callInfo := struct {
		OfferItemKey keys.OfferItemKey
	}{
		OfferItemKey: offerItemKey,
	}
	mock.lockFindReceivingApproversForOfferItem.Lock()
	mock.calls.FindReceivingApproversForOfferItem = append(mock.calls.FindReceivingApproversForOfferItem, callInfo)
	mock.lockFindReceivingApproversForOfferItem.Unlock()
	return mock.FindReceivingApproversForOfferItemFunc(offerItemKey)
}

// FindReceivingApproversForOfferItemCalls gets all the calls that were made to FindReceivingApproversForOfferItem.
// Check the length with:
//     len(mockedStore.FindReceivingApproversForOfferItemCalls())
func (mock *TradingStore) FindReceivingApproversForOfferItemCalls() []struct {
	OfferItemKey keys.OfferItemKey
} {
	var calls []struct {
		OfferItemKey keys.OfferItemKey
	}
	mock.lockFindReceivingApproversForOfferItem.RLock()
	calls = mock.calls.FindReceivingApproversForOfferItem
	mock.lockFindReceivingApproversForOfferItem.RUnlock()
	return calls
}

// GetOffer calls GetOfferFunc.
func (mock *TradingStore) GetOffer(key keys.OfferKey) (*trading.Offer, error) {
	if mock.GetOfferFunc == nil {
		panic("TradingStore.GetOfferFunc: method is nil but Store.GetOffer was just called")
	}
	callInfo := struct {
		Key keys.OfferKey
	}{
		Key: key,
	}
	mock.lockGetOffer.Lock()
	mock.calls.GetOffer = append(mock.calls.GetOffer, callInfo)
	mock.lockGetOffer.Unlock()
	return mock.GetOfferFunc(key)
}

// GetOfferCalls gets all the calls that were made to GetOffer.
// Check the length with:
//     len(mockedStore.GetOfferCalls())
func (mock *TradingStore) GetOfferCalls() []struct {
	Key keys.OfferKey
} {
	var calls []struct {
		Key keys.OfferKey
	}
	mock.lockGetOffer.RLock()
	calls = mock.calls.GetOffer
	mock.lockGetOffer.RUnlock()
	return calls
}

// GetOfferItem calls GetOfferItemFunc.
func (mock *TradingStore) GetOfferItem(ctx context.Context, key keys.OfferItemKey) (trading.OfferItem, error) {
	if mock.GetOfferItemFunc == nil {
		panic("TradingStore.GetOfferItemFunc: method is nil but Store.GetOfferItem was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key keys.OfferItemKey
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGetOfferItem.Lock()
	mock.calls.GetOfferItem = append(mock.calls.GetOfferItem, callInfo)
	mock.lockGetOfferItem.Unlock()
	return mock.GetOfferItemFunc(ctx, key)
}

// GetOfferItemCalls gets all the calls that were made to GetOfferItem.
// Check the length with:
//     len(mockedStore.GetOfferItemCalls())
func (mock *TradingStore) GetOfferItemCalls() []struct {
	Ctx context.Context
	Key keys.OfferItemKey
} {
	var calls []struct {
		Ctx context.Context
		Key keys.OfferItemKey
	}
	mock.lockGetOfferItem.RLock()
	calls = mock.calls.GetOfferItem
	mock.lockGetOfferItem.RUnlock()
	return calls
}

// GetOfferItemsForOffer calls GetOfferItemsForOfferFunc.
func (mock *TradingStore) GetOfferItemsForOffer(key keys.OfferKey) (*trading.OfferItems, error) {
	if mock.GetOfferItemsForOfferFunc == nil {
		panic("TradingStore.GetOfferItemsForOfferFunc: method is nil but Store.GetOfferItemsForOffer was just called")
	}
	callInfo := struct {
		Key keys.OfferKey
	}{
		Key: key,
	}
	mock.lockGetOfferItemsForOffer.Lock()
	mock.calls.GetOfferItemsForOffer = append(mock.calls.GetOfferItemsForOffer, callInfo)
	mock.lockGetOfferItemsForOffer.Unlock()
	return mock.GetOfferItemsForOfferFunc(key)
}

// GetOfferItemsForOfferCalls gets all the calls that were made to GetOfferItemsForOffer.
// Check the length with:
//     len(mockedStore.GetOfferItemsForOfferCalls())
func (mock *TradingStore) GetOfferItemsForOfferCalls() []struct {
	Key keys.OfferKey
} {
	var calls []struct {
		Key keys.OfferKey
	}
	mock.lockGetOfferItemsForOffer.RLock()
	calls = mock.calls.GetOfferItemsForOffer
	mock.lockGetOfferItemsForOffer.RUnlock()
	return calls
}

// GetOffersForUser calls GetOffersForUserFunc.
func (mock *TradingStore) GetOffersForUser(userKey keys.UserKey) (*trading.GetOffersResult, error) {
	if mock.GetOffersForUserFunc == nil {
		panic("TradingStore.GetOffersForUserFunc: method is nil but Store.GetOffersForUser was just called")
	}
	callInfo := struct {
		UserKey keys.UserKey
	}{
		UserKey: userKey,
	}
	mock.lockGetOffersForUser.Lock()
	mock.calls.GetOffersForUser = append(mock.calls.GetOffersForUser, callInfo)
	mock.lockGetOffersForUser.Unlock()
	return mock.GetOffersForUserFunc(userKey)
}

// GetOffersForUserCalls gets all the calls that were made to GetOffersForUser.
// Check the length with:
//     len(mockedStore.GetOffersForUserCalls())
func (mock *TradingStore) GetOffersForUserCalls() []struct {
	UserKey keys.UserKey
} {
	var calls []struct {
		UserKey keys.UserKey
	}
	mock.lockGetOffersForUser.RLock()
	calls = mock.calls.GetOffersForUser
	mock.lockGetOffersForUser.RUnlock()
	return calls
}

// GetTradingHistory calls GetTradingHistoryFunc.
func (mock *TradingStore) GetTradingHistory(ctx context.Context, ids *keys.UserKeys) ([]trading.HistoryEntry, error) {
	if mock.GetTradingHistoryFunc == nil {
		panic("TradingStore.GetTradingHistoryFunc: method is nil but Store.GetTradingHistory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids *keys.UserKeys
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockGetTradingHistory.Lock()
	mock.calls.GetTradingHistory = append(mock.calls.GetTradingHistory, callInfo)
	mock.lockGetTradingHistory.Unlock()
	return mock.GetTradingHistoryFunc(ctx, ids)
}

// GetTradingHistoryCalls gets all the calls that were made to GetTradingHistory.
// Check the length with:
//     len(mockedStore.GetTradingHistoryCalls())
func (mock *TradingStore) GetTradingHistoryCalls() []struct {
	Ctx context.Context
	Ids *keys.UserKeys
} {
	var calls []struct {
		Ctx context.Context
		Ids *keys.UserKeys
	}
	mock.lockGetTradingHistory.RLock()
	calls = mock.calls.GetTradingHistory
	mock.lockGetTradingHistory.RUnlock()
	return calls
}

// MarkOfferItemsAsAccepted calls MarkOfferItemsAsAcceptedFunc.
func (mock *TradingStore) MarkOfferItemsAsAccepted(ctx context.Context, approvedBy keys.UserKey, approvedByGiver *keys.OfferItemKeys, approvedByReceiver *keys.OfferItemKeys) error {
	if mock.MarkOfferItemsAsAcceptedFunc == nil {
		panic("TradingStore.MarkOfferItemsAsAcceptedFunc: method is nil but Store.MarkOfferItemsAsAccepted was just called")
	}
	callInfo := struct {
		Ctx                context.Context
		ApprovedBy         keys.UserKey
		ApprovedByGiver    *keys.OfferItemKeys
		ApprovedByReceiver *keys.OfferItemKeys
	}{
		Ctx:                ctx,
		ApprovedBy:         approvedBy,
		ApprovedByGiver:    approvedByGiver,
		ApprovedByReceiver: approvedByReceiver,
	}
	mock.lockMarkOfferItemsAsAccepted.Lock()
	mock.calls.MarkOfferItemsAsAccepted = append(mock.calls.MarkOfferItemsAsAccepted, callInfo)
	mock.lockMarkOfferItemsAsAccepted.Unlock()
	return mock.MarkOfferItemsAsAcceptedFunc(ctx, approvedBy, approvedByGiver, approvedByReceiver)
}

// MarkOfferItemsAsAcceptedCalls gets all the calls that were made to MarkOfferItemsAsAccepted.
// Check the length with:
//     len(mockedStore.MarkOfferItemsAsAcceptedCalls())
func (mock *TradingStore) MarkOfferItemsAsAcceptedCalls() []struct {
	Ctx                context.Context
	ApprovedBy         keys.UserKey
	ApprovedByGiver    *keys.OfferItemKeys
	ApprovedByReceiver *keys.OfferItemKeys
} {
	var calls []struct {
		Ctx                context.Context
		ApprovedBy         keys.UserKey
		ApprovedByGiver    *keys.OfferItemKeys
		ApprovedByReceiver *keys.OfferItemKeys
	}
	mock.lockMarkOfferItemsAsAccepted.RLock()
	calls = mock.calls.MarkOfferItemsAsAccepted
	mock.lockMarkOfferItemsAsAccepted.RUnlock()
	return calls
}

// SaveOffer calls SaveOfferFunc.
func (mock *TradingStore) SaveOffer(offer *trading.Offer, offerItems *trading.OfferItems) error {
	if mock.SaveOfferFunc == nil {
		panic("TradingStore.SaveOfferFunc: method is nil but Store.SaveOffer was just called")
	}
	callInfo := struct {
		Offer      *trading.Offer
		OfferItems *trading.OfferItems
	}{
		Offer:      offer,
		OfferItems: offerItems,
	}
	mock.lockSaveOffer.Lock()
	mock.calls.SaveOffer = append(mock.calls.SaveOffer, callInfo)
	mock.lockSaveOffer.Unlock()
	return mock.SaveOfferFunc(offer, offerItems)
}

// SaveOfferCalls gets all the calls that were made to SaveOffer.
// Check the length with:
//     len(mockedStore.SaveOfferCalls())
func (mock *TradingStore) SaveOfferCalls() []struct {
	Offer      *trading.Offer
	OfferItems *trading.OfferItems
} {
	var calls []struct {
		Offer      *trading.Offer
		OfferItems *trading.OfferItems
	}
	mock.lockSaveOffer.RLock()
	calls = mock.calls.SaveOffer
	mock.lockSaveOffer.RUnlock()
	return calls
}

// UpdateOfferItem calls UpdateOfferItemFunc.
func (mock *TradingStore) UpdateOfferItem(ctx context.Context, offerItem trading.OfferItem) error {
	if mock.UpdateOfferItemFunc == nil {
		panic("TradingStore.UpdateOfferItemFunc: method is nil but Store.UpdateOfferItem was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		OfferItem trading.OfferItem
	}{
		Ctx:       ctx,
		OfferItem: offerItem,
	}
	mock.lockUpdateOfferItem.Lock()
	mock.calls.UpdateOfferItem = append(mock.calls.UpdateOfferItem, callInfo)
	mock.lockUpdateOfferItem.Unlock()
	return mock.UpdateOfferItemFunc(ctx, offerItem)
}

// UpdateOfferItemCalls gets all the calls that were made to UpdateOfferItem.
// Check the length with:
//     len(mockedStore.UpdateOfferItemCalls())
func (mock *TradingStore) UpdateOfferItemCalls() []struct {
	Ctx       context.Context
	OfferItem trading.OfferItem
} {
	var calls []struct {
		Ctx       context.Context
		OfferItem trading.OfferItem
	}
	mock.lockUpdateOfferItem.RLock()
	calls = mock.calls.UpdateOfferItem
	mock.lockUpdateOfferItem.RUnlock()
	return calls
}

// UpdateOfferStatus calls UpdateOfferStatusFunc.
func (mock *TradingStore) UpdateOfferStatus(key keys.OfferKey, offer trading.OfferStatus) error {
	if mock.UpdateOfferStatusFunc == nil {
		panic("TradingStore.UpdateOfferStatusFunc: method is nil but Store.UpdateOfferStatus was just called")
	}
	callInfo := struct {
		Key   keys.OfferKey
		Offer trading.OfferStatus
	}{
		Key:   key,
		Offer: offer,
	}
	mock.lockUpdateOfferStatus.Lock()
	mock.calls.UpdateOfferStatus = append(mock.calls.UpdateOfferStatus, callInfo)
	mock.lockUpdateOfferStatus.Unlock()
	return mock.UpdateOfferStatusFunc(key, offer)
}

// UpdateOfferStatusCalls gets all the calls that were made to UpdateOfferStatus.
// Check the length with:
//     len(mockedStore.UpdateOfferStatusCalls())
func (mock *TradingStore) UpdateOfferStatusCalls() []struct {
	Key   keys.OfferKey
	Offer trading.OfferStatus
} {
	var calls []struct {
		Key   keys.OfferKey
		Offer trading.OfferStatus
	}
	mock.lockUpdateOfferStatus.RLock()
	calls = mock.calls.UpdateOfferStatus
	mock.lockUpdateOfferStatus.RUnlock()
	return calls
}
