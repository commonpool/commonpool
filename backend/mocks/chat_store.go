// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/commonpool/backend/chat (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "github.com/commonpool/backend/model"
	chat "github.com/commonpool/backend/pkg/chat"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// ChatStore is a mock of Store interface
type ChatStore struct {
	ctrl     *gomock.Controller
	recorder *ChatStoreMockRecorder
}

// ChatStoreMockRecorder is the mock recorder for ChatStore
type ChatStoreMockRecorder struct {
	mock *ChatStore
}

// NewChatStore creates a new mock instance
func NewChatStore(ctrl *gomock.Controller) *ChatStore {
	mock := &ChatStore{ctrl: ctrl}
	mock.recorder = &ChatStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ChatStore) EXPECT() *ChatStoreMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method
func (m *ChatStore) CreateChannel(arg0 context.Context, arg1 *chat.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChannel indicates an expected call of CreateChannel
func (mr *ChatStoreMockRecorder) CreateChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*ChatStore)(nil).CreateChannel), arg0, arg1)
}

// CreateSubscription mocks base method
func (m *ChatStore) CreateSubscription(arg0 context.Context, arg1 model.ChannelSubscriptionKey, arg2 string) (*chat.ChannelSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(*chat.ChannelSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription
func (mr *ChatStoreMockRecorder) CreateSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*ChatStore)(nil).CreateSubscription), arg0, arg1, arg2)
}

// DeleteSubscription mocks base method
func (m *ChatStore) DeleteSubscription(arg0 context.Context, arg1 model.ChannelSubscriptionKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription
func (mr *ChatStoreMockRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*ChatStore)(nil).DeleteSubscription), arg0, arg1)
}

// GetChannel mocks base method
func (m *ChatStore) GetChannel(arg0 context.Context, arg1 model.ChannelKey) (*chat.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0, arg1)
	ret0, _ := ret[0].(*chat.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel
func (mr *ChatStoreMockRecorder) GetChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*ChatStore)(nil).GetChannel), arg0, arg1)
}

// GetMessage mocks base method
func (m *ChatStore) GetMessage(arg0 context.Context, arg1 model.MessageKey) (*chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", arg0, arg1)
	ret0, _ := ret[0].(*chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage
func (mr *ChatStoreMockRecorder) GetMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*ChatStore)(nil).GetMessage), arg0, arg1)
}

// GetMessages mocks base method
func (m *ChatStore) GetMessages(arg0 context.Context, arg1 *chat.GetMessages) (*chat.GetMessagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessages", arg0, arg1)
	ret0, _ := ret[0].(*chat.GetMessagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessages indicates an expected call of GetMessages
func (mr *ChatStoreMockRecorder) GetMessages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessages", reflect.TypeOf((*ChatStore)(nil).GetMessages), arg0, arg1)
}

// GetSubscription mocks base method
func (m *ChatStore) GetSubscription(arg0 context.Context, arg1 *chat.GetSubscription) (*chat.ChannelSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscription", arg0, arg1)
	ret0, _ := ret[0].(*chat.ChannelSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscription indicates an expected call of GetSubscription
func (mr *ChatStoreMockRecorder) GetSubscription(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscription", reflect.TypeOf((*ChatStore)(nil).GetSubscription), arg0, arg1)
}

// GetSubscriptionsForChannel mocks base method
func (m *ChatStore) GetSubscriptionsForChannel(arg0 context.Context, arg1 model.ChannelKey) ([]chat.ChannelSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsForChannel", arg0, arg1)
	ret0, _ := ret[0].([]chat.ChannelSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsForChannel indicates an expected call of GetSubscriptionsForChannel
func (mr *ChatStoreMockRecorder) GetSubscriptionsForChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsForChannel", reflect.TypeOf((*ChatStore)(nil).GetSubscriptionsForChannel), arg0, arg1)
}

// GetSubscriptionsForUser mocks base method
func (m *ChatStore) GetSubscriptionsForUser(arg0 context.Context, arg1 *chat.GetSubscriptions) (*chat.ChannelSubscriptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionsForUser", arg0, arg1)
	ret0, _ := ret[0].(*chat.ChannelSubscriptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionsForUser indicates an expected call of GetSubscriptionsForUser
func (mr *ChatStoreMockRecorder) GetSubscriptionsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionsForUser", reflect.TypeOf((*ChatStore)(nil).GetSubscriptionsForUser), arg0, arg1)
}

// SaveMessage mocks base method
func (m *ChatStore) SaveMessage(arg0 context.Context, arg1 *chat.SaveMessageRequest) (*chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", arg0, arg1)
	ret0, _ := ret[0].(*chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMessage indicates an expected call of SaveMessage
func (mr *ChatStoreMockRecorder) SaveMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*ChatStore)(nil).SaveMessage), arg0, arg1)
}
